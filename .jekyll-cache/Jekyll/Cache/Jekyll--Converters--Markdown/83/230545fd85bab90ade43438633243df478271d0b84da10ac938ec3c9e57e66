I"£<p>Nano Server is a new deployment option for Server 2016 where you need to create the images prior the deployment. If you‚Äôre unfamiliar with Nano Server I highly recommend the following ‚Äú<a href="https://technet.microsoft.com/en-us/library/mt126167.aspx#BKMK_online">getting started</a>‚Äù documentation.</p>

<p>After deployment you might want to service your deployed images, like adding more packages or install servicing packges (updates / rollup packs).</p>

<p>Nano Server supports the following methods to add the items above.</p>

<ul>
  <li>PowerShell Package Provider</li>
  <li>Windows Server Update Services</li>
</ul>

<h3 id="adding-packages-to-an-existing-nano-server-deployed-image">Adding Packages to an existing Nano Server deployed image</h3>

<p>To add packages you can leverage PowerShell PackageManagement, formerly known as OneGet capabilities.</p>

<p>PackageManagement is essentially a Package Management Aggregator.<br />
It creates a unified and consistent PowerShell interface for users and provides a plug-in model at the back end that different<br />
installer technologies or package managers can plug-in as providers, using PackageManagement APIs.<br />
Each provider further manages one or multiple package sources (repositories) where software packages are stored.</p>

<div id="page" class="site container-fluid">
  <div id="site-content" class="site-content row">
    <div id="primary" class="content-area col-sm-9">
      <div id="single-content" class="div-content">
        <article id="post-43" class="post-43 post type-post status-publish format-standard hentry category-uncategorized tag-packagemanagement"> 
        
        <div class="entry-content single">
          <p>
            <a href="http://www.miru.ch/deploy-packages-and-windows-updates-to-nano-servers/oneget-architecture/"><img class="alignleft wp-image-4770" src="http://www.miru.ch/wp-content/uploads/2016/07/oneget-architecture.png" alt="oneget-architecture" width="589" height="323" srcset="http://www.miru.ch/wp-content/uploads/2016/07/oneget-architecture.png 784w, http://www.miru.ch/wp-content/uploads/2016/07/oneget-architecture-300x165.png 300w, http://www.miru.ch/wp-content/uploads/2016/07/oneget-architecture-768x421.png 768w" sizes="(max-width: 589px) 100vw, 589px" /></a>
          </p>
        </div></article>
      </div>
    </div>
  </div>
</div>

<p>¬†</p>

<p>In this example we are going to deploy the DSC package, post image deployment, to ensure DSC capabilities for next step.</p>

<p>This little sample script installs the NanoServerPackage provider, downloads and installes the DSC Package.</p>

<pre class="">#Install Nano Server Package Provider and DSC Package on all Nodes
$Nodes = @('S2D01.mirucloud.local','S2D02.mirucloud.local','S2D03.mirucloud.local','S2D04.mirucloud.local')
$Nodes | foreach {
 Invoke-Command -ComputerName $_ -ScriptBlock {
 Install-PackageProvider NanoServerPackage -Force
 Import-PackageProvider NanoServerPackage
 Install-package Microsoft-NanoServer-DSC-Package -ProviderName NanoServerPackage -Force
 }
}</pre>

<p>¬†</p>

<h3 id="installing-windows-server-updates">Installing Windows Server Updates</h3>

<h4 id="deploy-windows-update-client-settings">Deploy Windows Update Client Settings</h4>

<p>Nano Server does not support GPOs at all, so to get Windows Updates, you have to distribute Update Client registry ¬†settings using PowerShell, or even better, using PowerShell DSC. The next example is a DSC configuration to deploy required registry settings for Windows Update Client to pull updates from an internal WSUS.</p>

<pre class="">$ConfigurationData = 
@{
 AllNodes = 
 @(
 @{
 NodeName = '*'
 WSUSServer = 'http://vmmtp5.mirucloud.local:8530'
 WSUSTargetGroup = 'StorageNodes'
 },


 @{
 NodeName = 'somenode'
 }

);
 NonNodeData = ''
}


Configuration WSUSAutodownload
{
 param(
 [Parameter(mandatory=$true)]
 [string[]]$NodeName
 )
 
 Node $NodeName
 {
 Registry UpdateServer
 {
 Key = 'HKLM:\Software\Policies\Microsoft\Windows\WindowsUpdate' 
 ValueName = 'WUServer'
 ValueData = 'http://fppw0010.adm.swissic.ch:8530'
 ValueType = 'String'
 Ensure = 'Present'
 }

Registry StatusServer
 {
 Key = 'HKLM:\Software\Policies\Microsoft\Windows\WindowsUpdate' 
 ValueName = 'WUStatusServer'
 ValueData = 'http://vmmtp5.mirucloud.local:8530'
 ValueType = 'String'
 Ensure = 'Present'
 }

Registry UpdateTargetGroup
 {
 Key = 'HKLM:\Software\Policies\Microsoft\Windows\WindowsUpdate' 
 ValueName = 'TargetGroup'
 ValueData = 'StorageNodes'
 ValueType = 'String'
 Ensure = 'Present'
 }

Registry TargetMode
 {
 Key = 'HKLM:\Software\Policies\Microsoft\Windows\WindowsUpdate' 
 ValueName = 'TargetGroupEnabled'
 ValueData = 1
 ValueType = 'DWord'
 Ensure = 'Present'
 }
 
 Registry InstallOption
 {
 Key = 'HKLM:\Software\Policies\Microsoft\Windows\WindowsUpdate\AU' 
 ValueName = 'AUOptions'
 ValueData = 3 #(2 = Notify before download. 3 = Automatically download and notify of installation. 4 = Automatic download and scheduled installation. (Only valid if values exist for ScheduledInstallDay and ScheduledInstallTime.) 5 = Automatic Updates is required, but end users can configure it.)
 ValueType = 'DWord'
 Ensure = 'Present'
 }
 
 Registry DetectionFrequencyHours
 {
 Key = 'HKLM:\Software\Policies\Microsoft\Windows\WindowsUpdate\AU' 
 ValueName = 'DetectionFrequencyEnabled'
 ValueData = 2 # (hours frequency)
 ValueType = 'DWord'
 Ensure = 'Present'
 } 
 
 Registry Installday
 {
 Key = 'HKLM:\Software\Policies\Microsoft\Windows\WindowsUpdate\AU' 
 ValueName = 'ScheduledInstallDay'
 ValueData = 6 # 0-7 (where 0 is every day, 1 is Sunday)
 ValueType = 'DWord'
 Ensure = 'Present'
 } 
 }
}</pre>

<pre class="">$Nodes = @('S2D01.mirucloud.local','S2D02.mirucloud.local','S2D03.mirucloud.local','S2D04.mirucloud.local')</pre>

<pre class="">#Create Configuration
WSUSAutodownload -ConfigurationData $ConfigurationData -OutputPath C:\DSC\WSUS -NodeName $Nodes

#Push Config
Start-DscConfiguration -Path C:\DSC\WSUS -Wait -Force -Verbose

</pre>

<p>Whit this set, your Nano Servers will get the required setting to pull and download updates from WSUS. But, wait, there‚Äôs one more thing.</p>

<p>How to invoke a Windows Update Client update cycle?</p>

<p>Again, of yourse, PowerShell. Here‚Äôs the recipe for this, a little PS Script to invoke an update run to install all required updates. Optionally you can force a reboot cycle.</p>

<pre class="">param(
[Parameter(mandatory=$true)]
[string]$ServerName,

[Parameter(mandatory=$false)]
[switch]$InstallRequired,

[Parameter(mandatory=$false)]
[switch]$ForceReboot
)


#Search Updates
$sess = New-CimInstance -Namespace root/Microsoft/Windows/WindowsUpdate -ClassName MSFT_WUOperationsSession -CimSession $ServerName
$scanResults = Invoke-CimMethod -InputObject $sess -MethodName ScanForUpdates -Arguments @{SearchCriteria="IsInstalled=0";OnlineScan=$true}

#display available Updates
$scanResults.Updates | Select Title,KBArticleID


#Install Updates
If ($InstallRequired)
{
 If (($scanResults.Updates).count -gt 0)
 {
 
 Write-Output "Installing Updates"
 $scanResults = Invoke-CimMethod -InputObject $sess -MethodName ApplyApplicableUpdates

If ($ForceReboot)
 {
 Write-Output "Restarting Node $ServerName"
 Invoke-Command -ComputerName $ServerName -ScriptBlock {Restart-Computer -Force}
 }
 }
 Else
 {
 Write-Warning "No applicaple Updates found"
 }
}</pre>

<p>I really enjoy Nano Server and it‚Äôs concepts. So with this post I hope this helps and you‚Äôll love it as well, more and more üòâ</p>

<p>Stay tuned for more coming up‚Ä¶</p>
:ET