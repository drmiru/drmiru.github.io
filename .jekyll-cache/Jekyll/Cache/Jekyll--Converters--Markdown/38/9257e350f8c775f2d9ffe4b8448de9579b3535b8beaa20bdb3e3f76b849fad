I"1<p>In an earlier post I showed <a href="http://www.miru.ch/sma-workflows-and-remoting-how-to-deal-with-variable-scoping/" target="_blank">how-to-deal-with-variable-scoping</a> inside PowerShell Workflows to be usable within InlineScript blocks. While the $USING way is simple and easy it conflicts with proper error handling inside InlineScripts.</p>

<p>First of all, the credits for filing the bug on connect, and writing first <a href="http://www.powershellmagazine.com/2015/09/14/why-you-should-install-wmf-5-0-production-preview-on-your-sma-runbook-workers/" target="_blank">blog posts </a>go to fellow MVP and PowerShell geeks <a href="https://twitter.com/trondhindenes" target="_blank">Trond Hindenes</a> and <a href="http://www.powershellmagazine.com/2015/09/14/why-you-should-install-wmf-5-0-production-preview-on-your-sma-runbook-workers/" target="_blank">Ben Gelens</a>.</p>

<p>I recently came across multiple SMA runbook issues, not limited to single customer, but it seemed to me quite randomly. And the worst: No one changed the Runbook code and they suddenly stopped to work. After investigating quiet a reasonable amount of time I notized that the variable rescoping within Inlinescripts ($USING:) was not working any more in some situations. That’s were I came across the blog post from Ben Gelens. I was able to reproduce the error in different ways. The root cause as Ben states correctly is $ErrorActionPreference variable which forces a bug in WF compilation, <strong>AND only</strong> if set to value “stop”. Setting $erroractionpreference = “stop” is something I often use inside PowerShell Workflows or regular PS Scripts, as it enables try catch statements on a script level. I’m pretty sure the bug was introduced by an update to the .NET / WMF components, but at this point in time I wasn’t able to figure out which KB could be the one in question.</p>

<h3 id="now-when-and-where-does-this-bug-hit-you">Now when and where does this bug hit you?</h3>

<ul>
  <li>On the WinRM Client Side (e.g. SMA Runbook Worker)</li>
  <li>When using multiple InlineScript blocks in combination with WinRM to the same remote host inside a single workflow</li>
  <li>When using nested runbooks with the above combinations</li>
</ul>

<h3 id="preventing-methods--workarounds">Preventing methods / Workarounds</h3>

<ul>
  <li>Avoiding multiple InlineScript blocks within a single workflow to the same remote host</li>
  <li>Avoiding $ErrorActionPreference = “Stop” inside the InlineScript blocks, use “-ErrorAction Stop” statements for CMDLETs where needed</li>
  <li>Update SMA Runbook Workers with WMF5.0 <em>(DISCLAIMER: Even this seems to work quite fine, it’s not yet officially supported by the Automation Team inside MSFT)</em></li>
</ul>

<p> </p>

<p>I’m happy to hear any other workarounds and thoughts.</p>
:ET